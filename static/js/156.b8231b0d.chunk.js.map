{"version":3,"file":"static/js/156.b8231b0d.chunk.js","mappings":"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","sources":["components/current-status/CurrentStatusHeader.tsx","components/shared/StatisticDate.tsx","components/shared/StatisticErrorIndex.tsx","shared/constants.ts","utils/pullrequest.utils.tsx"],"sourcesContent":["import {\n  InfoCircleOutlined,\n  NodeCollapseOutlined,\n  ReloadOutlined,\n  LinkOutlined\n} from \"@ant-design/icons\";\nimport {\n  Button,\n  Card,\n  Col,\n  Modal,\n  PageHeader,\n  Popover,\n  Row,\n  Skeleton,\n  Statistic,\n  Typography,\n  Tooltip\n} from \"antd\";\nimport React, { Suspense } from \"react\";\nimport { IData } from \"../../model/data.model\";\nimport { STATISTICS_STYLE } from \"../../shared/constants\";\nimport Loading from \"../shared/Loading\";\nimport StatisticDate from \"../shared/StatisticDate\";\nimport StatisticErrorIndex from \"../shared/StatisticErrorIndex\";\nconst ProjectStatusInformation = React.lazy(\n  () => import(\"../shared/ProjectStatusInformation\")\n);\nconst StatisticPullRequests = React.lazy(\n  () => import(\"../shared/StatisticPullRequests\")\n);\nconst StatisticErrorIndexByProject = React.lazy(\n  () => import(\"../shared/StatisticErrorIndexByProject\")\n);\n\ninterface ICurrentStatusHeader {\n  data: IData;\n  toggleCollapse?: () => void;\n  activePanels?: string[];\n  loading: boolean;\n  reload: () => void;\n  latestLoad: Date;\n}\nexport const CurrentStatusHeader: React.FC<ICurrentStatusHeader> = props => {\n  const infoModal = () =>\n    Modal.info({\n      content: (\n        <Suspense fallback={<Skeleton />}>\n          <ProjectStatusInformation />\n        </Suspense>\n      ),\n      onOk() {},\n      width: 1000,\n      centered: true\n    });\n  return (\n    <Card style={{ margin: 24, marginTop: 10 }}>\n      <PageHeader\n        title={<Typography.Title level={2}>Project Status</Typography.Title>}\n        subTitle=\"List of pull requests\"\n        style={{ padding: 0 }}\n        extra={[\n          <Tooltip title=\"Reload information from service\">\n            <Button\n              key=\"reload\"\n              type=\"primary\"\n              icon={<ReloadOutlined />}\n              loading={props.loading}\n              onClick={props.reload}\n            >\n              Reload\n            </Button>\n          </Tooltip>,\n          <Tooltip title=\"Show project status information\">\n            <Button\n              key=\"info\"\n              type=\"text\"\n              shape=\"circle\"\n              icon={<InfoCircleOutlined />}\n              onClick={infoModal}\n            />\n          </Tooltip>\n        ]}\n      >\n        <Row gutter={16}>\n          <Col>\n            <Statistic\n              title=\"Generated By\"\n              value={props.data?.metadata?.createdBy}\n              valueStyle={STATISTICS_STYLE}\n              suffix={\n                props.data?.metadata?.createdUrl ? (\n                  <Tooltip title=\"Visit job generating the report\">\n                    <Button\n                      type=\"link\"\n                      href={props.data?.metadata?.createdUrl}\n                      target=\"_blank\"\n                      icon={<LinkOutlined />}\n                      style={{\n                        padding: 0,\n                        ...STATISTICS_STYLE,\n                        fontWeight: \"bold\"\n                      }}\n                    />\n                  </Tooltip>\n                ) : null\n              }\n            />\n          </Col>\n          <Col>\n            <Popover\n              content={\n                <Suspense fallback={<Loading />}>\n                  <StatisticPullRequests projects={props.data.data} size={12} />\n                </Suspense>\n              }\n              placement=\"bottom\"\n            >\n              <Statistic\n                title=\"Number of Projects\"\n                prefix={<NodeCollapseOutlined />}\n                value={props.data.data.length}\n                valueStyle={STATISTICS_STYLE}\n              />\n            </Popover>\n          </Col>\n          <Col>\n            <StatisticErrorIndex\n              title=\"Error Index\"\n              pullRequests={props.data.data.flatMap(\n                project => project.pullRequests\n              )}\n              placement=\"bottom\"\n              popoverContent={\n                <Suspense fallback={<Loading />}>\n                  <StatisticErrorIndexByProject projects={props.data.data} />\n                </Suspense>\n              }\n            />\n          </Col>\n          <Col>\n            <Suspense fallback={<Loading size={16} />}>\n              <StatisticDate\n                date={\n                  props.data?.metadata?.date\n                    ? new Date(Date.parse(props.data?.metadata?.date))\n                    : new Date()\n                }\n                text=\"Creation Date\"\n                intervalSeconds={1}\n              />\n            </Suspense>\n          </Col>\n          <Col>\n            <Suspense fallback={<Loading size={16} />}>\n              <StatisticDate\n                date={props.latestLoad}\n                text=\"Latest Load\"\n                intervalSeconds={1}\n              />\n            </Suspense>\n          </Col>\n        </Row>\n      </PageHeader>\n    </Card>\n  );\n};\n\nexport default CurrentStatusHeader;\n","import { Statistic } from \"antd\";\nimport React from \"react\";\nimport { STATISTICS_STYLE } from \"../../shared/constants\";\n\ninterface IStatisticDate {\n  date: Date;\n  intervalSeconds?: number;\n  text: string;\n}\nexport const StatisticDate: React.FC<IStatisticDate> = props => {\n  // const [dateDifferenceMiliseconds, setDateDifferenceMiliseconds] =\n  //   useState<number>(0);\n\n  // useEffect(() => {\n  //   if (props.date && props.intervalSeconds) {\n  //     const interval = setInterval(\n  //       () =>\n  //         setDateDifferenceMiliseconds(\n  //           new Date().getTime() - props.date.getTime()\n  //         ),\n  //       props.intervalSeconds * 1000\n  //     );\n  //     return () => clearInterval(interval);\n  //   }\n  // }, [props.date, props.intervalSeconds]);\n\n  return (\n    <>\n      <Statistic\n        title={props.text}\n        loading={!props.date}\n        valueStyle={STATISTICS_STYLE}\n        value={props.date.toLocaleString()}\n      />\n      {/* {props.date && dateDifferenceMiliseconds ? (\n        <Tooltip placement=\"bottom\" title={props.date.toLocaleString()}>\n          <Tag\n            icon={<ClockCircleOutlined />}\n            color=\"success\"\n            style={{ marginTop: 5 }}\n          >\n            {prettyMilliseconds(dateDifferenceMiliseconds)}\n          </Tag>\n        </Tooltip>\n      ) : (\n        <Loading />\n      )} */}\n    </>\n  );\n};\n\nexport default StatisticDate;\n","import { Statistic, Popover, Tooltip } from \"antd\";\nimport { InfoCircleOutlined } from \"@ant-design/icons\";\nimport { RenderFunction, TooltipPlacement } from \"antd/lib/tooltip\";\nimport React, { useEffect, useState } from \"react\";\nimport { IPullRequest } from \"../../model/pullrequest.model\";\nimport { STATISTICS_STYLE } from \"../../shared/constants\";\nimport { calculateErrorIndex } from \"../../utils/pullrequest.utils\";\n\ninterface IStaticErrorIndex {\n  title?: string;\n  pullRequests: IPullRequest[];\n  popoverContent?: React.ReactNode | RenderFunction;\n  size?: number;\n  placement?: TooltipPlacement;\n}\nexport const StaticErrorIndex: React.FC<IStaticErrorIndex> = props => {\n  const [errorIndex, setErrorIndex] = useState<number>(0);\n\n  const fontSizeStyle = props.size\n    ? { fontSize: props.size }\n    : STATISTICS_STYLE;\n\n  useEffect(() => {\n    if (props.pullRequests?.length) {\n      setErrorIndex(calculateErrorIndex(props.pullRequests));\n    }\n  }, [props.pullRequests]);\n\n  return props.popoverContent ? (\n    <Popover content={props.popoverContent} placement={props.placement}>\n      <Statistic\n        prefix={\n          <Tooltip title=\"This index is calculated by n_failures/n_checks\">\n            <InfoCircleOutlined style={{ fontSize: 12 }} />\n          </Tooltip>\n        }\n        title={props.title}\n        value={errorIndex}\n        precision={2}\n        valueStyle={{\n          ...fontSizeStyle,\n          color: errorIndex <= 20 ? \"#3f8600\" : \"#cf1322\"\n        }}\n        suffix=\"%\"\n      />\n    </Popover>\n  ) : (\n    <Statistic\n      title={props.title}\n      value={errorIndex}\n      precision={2}\n      valueStyle={{\n        ...fontSizeStyle,\n        color: errorIndex <= 20 ? \"#3f8600\" : \"#cf1322\"\n      }}\n      suffix=\"%\"\n    />\n  );\n};\n\nexport default StaticErrorIndex;\n","export const CHECKS = {\n  CONCLUSION: {\n    SUCCESS: \"success\",\n    SKIPPED: \"skipped\",\n    FAILURE: \"failure\",\n    CANCELLED: \"cancelled\"\n  },\n  STATUS: {\n    COMPLETED: \"completed\",\n    IN_PROGRESS: \"in_progress\"\n  }\n};\n\nexport const STATUS_MARGIN_TOP = 198;\nexport const STATUS_MARGIN_RIGHT = STATUS_MARGIN_TOP + 10;\n\nexport const STATISTICS_STYLE = { fontSize: 18 };\n","import { IProject } from \"../model/project.model\";\nimport { IPullRequest } from \"../model/pullrequest.model\";\nimport { CHECKS } from \"../shared/constants\";\nexport const calculateErrorIndex = (pullrequests: IPullRequest[]) => {\n  const checks = pullrequests.flatMap(pr => pr.checks);\n  const failureChecks = checks.filter(\n    check => check.conclusion === CHECKS.CONCLUSION.FAILURE\n  );\n  return checks?.length ? (failureChecks.length * 100) / checks.length : 0;\n};\n\nexport const getProjectKey = (project: IProject) =>\n  project.key.replace(\"/\", \"_\");\n"],"names":["ProjectStatusInformation","React","StatisticPullRequests","StatisticErrorIndexByProject","CurrentStatusHeader","props","style","margin","marginTop","title","level","subTitle","padding","extra","type","icon","loading","onClick","reload","shape","Modal","content","Suspense","fallback","onOk","width","centered","gutter","value","data","metadata","createdBy","valueStyle","STATISTICS_STYLE","suffix","createdUrl","href","target","fontWeight","projects","size","placement","prefix","length","pullRequests","flatMap","project","popoverContent","date","Date","parse","text","intervalSeconds","latestLoad","toLocaleString","useState","errorIndex","setErrorIndex","fontSizeStyle","fontSize","useEffect","calculateErrorIndex","precision","color","CHECKS","CONCLUSION","SUCCESS","SKIPPED","FAILURE","CANCELLED","STATUS","COMPLETED","IN_PROGRESS","STATUS_MARGIN_TOP","STATUS_MARGIN_RIGHT","pullrequests","checks","pr","failureChecks","filter","check","conclusion","getProjectKey","key","replace"],"sourceRoot":""}